// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: chat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "chat";

export interface SendMessageRequest {
  message: string;
}

export interface SendMessageResponse {
  ok: boolean;
}

export const CHAT_PACKAGE_NAME = "chat";

function createBaseSendMessageRequest(): SendMessageRequest {
  return { message: "" };
}

export const SendMessageRequest: MessageFns<SendMessageRequest> = {
  encode(message: SendMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSendMessageResponse(): SendMessageResponse {
  return { ok: false };
}

export const SendMessageResponse: MessageFns<SendMessageResponse> = {
  encode(message: SendMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ok !== false) {
      writer.uint32(8).bool(message.ok);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface ChatServiceClient {
  sendMessage(request: SendMessageRequest): Observable<SendMessageResponse>;
}

export interface ChatServiceController {
  sendMessage(
    request: SendMessageRequest,
  ): Promise<SendMessageResponse> | Observable<SendMessageResponse> | SendMessageResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendMessage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";

export type ChatServiceService = typeof ChatServiceService;
export const ChatServiceService = {
  sendMessage: {
    path: "/chat.ChatService/SendMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendMessageRequest): Buffer => Buffer.from(SendMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SendMessageRequest => SendMessageRequest.decode(value),
    responseSerialize: (value: SendMessageResponse): Buffer => Buffer.from(SendMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SendMessageResponse => SendMessageResponse.decode(value),
  },
} as const;

export interface ChatServiceServer extends UntypedServiceImplementation {
  sendMessage: handleUnaryCall<SendMessageRequest, SendMessageResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
